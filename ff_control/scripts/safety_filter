#!/usr/bin/env python3

# MIT License
#
# Copyright (c) 2023 Stanford Autonomous Systems Lab
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


import rclpy
from rclpy.node import Node
from rclpy.duration import Duration
import numpy as np
import time

from ff_msgs.msg import ThrusterCommand
from ff_msgs.msg import WheelVelCommand
from ff_msgs.msg import BinaryCommand
from std_msgs.msg import Bool

class SafetyFilter(Node):

    def __init__(self):
        super().__init__('safety_filter')
        self.get_logger().info("Safety Filter Node Started")
        self.last_thrust_time = None
        self.last_wheel_time = None
        self.wait_period = 1 # seconds to wait w/ receiving anything before publishing a zero message
        self.kill_state = False

        # Create publishers for thruster and wheel commands
        self.thrust_pub = self.create_publisher(ThrusterCommand, 'commands/duty_cycle', 10)
        self.wheel_pub = self.create_publisher(WheelVelCommand, 'commands/velocity', 10)
        self.bool_thrust_pub = self.create_publisher(BinaryCommand, 'commands/binary', 10)

        # Create subscribers for thruster and wheel commands
        self.thrust_sub = self.create_subscription(
            ThrusterCommand,
            'ctrl/duty_cycle',
            self.thrust_callback,
            10)
        self.wheel_sub = self.create_subscription(
            WheelVelCommand,
            'ctrl/velocity',
            self.wheel_callback,
            10)
        self.bool_thrust_sub = self.create_subscription(
            BinaryCommand,
            'ctrl/binary',
            self.bool_thrust_callback,
            10)

        # Create timer to check if we've received any messages in the last 'wait_period' seconds
        self.timer = self.create_timer(0.1, self.check_timer_callback)

        # Create a subscriber to listen for a kill message
        self.kill_sub = self.create_subscription(
            Bool,
            'kill',
            self.kill_callback,
            10)

    def kill_callback(self, msg):
        if msg.data:
            self.get_logger().info("Kill message received. Publishing zero thrust and wheel commands.")
            self.send_zero_thrust()
            self.send_zero_wheel()
            self.kill_state = True

    def check_timer_callback(self):
        # If no message was received in the last 'wait_period' seconds, publish a zero message
        if self.last_thrust_time is None or self.get_clock().now() - self.last_thrust_time > Duration(seconds=self.wait_period):
            self.send_zero_thrust()
            self.last_thrust_time = self.get_clock().now()

        if self.last_wheel_time is None or self.get_clock().now() - self.last_wheel_time > Duration(seconds=self.wait_period):
            self.send_zero_wheel()
            self.last_wheel_time = self.get_clock().now()

    def thrust_callback(self, msg):
        if self.kill_state:
            self.get_logger().info("Kill state is active. Ignoring thrust command.")
            return
        # Publish the message to thrust pub
        self.thrust_pub.publish(msg)
        # Store time last message was published
        self.last_thrust_time = self.get_clock().now()

    def bool_thrust_callback(self, msg):
        if self.kill_state:
            self.get_logger().info("Kill state is active. Ignoring thrust command.")
            return
        # Publish the message to thrust pub
        self.bool_thrust_pub.publish(msg)
        # Store time last message was published
        self.last_thrust_time = self.get_clock().now()

    def wheel_callback(self, msg):
        if self.kill_state:
            self.get_logger().info("Kill state is active. Ignoring wheel command.")
            return
        # Publish the message to wheel pub
        self.wheel_pub.publish(msg)
        # Store time last message was published
        self.last_wheel_time = self.get_clock().now()

    def send_zero_thrust(self):
        zero_thrust_msg = ThrusterCommand()
        zero_thrust_msg.header.stamp = self.get_clock().now().to_msg()
        zero_thrust_msg.duty_cycle = np.zeros(8)

        zero_thrust_binary_msg = BinaryCommand()
        zero_thrust_binary_msg.header.stamp = self.get_clock().now().to_msg()
        zero_thrust_binary_msg.binary_command = [False] * 8
        
        self.thrust_pub.publish(zero_thrust_msg)
        self.bool_thrust_pub.publish(zero_thrust_binary_msg)
        

    def send_zero_wheel(self):
        zero_wheel_msg = WheelVelCommand()
        zero_wheel_msg.header.stamp = self.get_clock().now().to_msg()
        zero_wheel_msg.velocity = 0.0
        self.wheel_pub.publish(WheelVelCommand())


def main(args=None):
    rclpy.init(args=args)

    safety_filter = SafetyFilter()

    rclpy.spin(safety_filter)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    safety_filter.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
