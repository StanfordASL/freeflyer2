#!/usr/bin/env python3

# MIT License
#
# Copyright (c) 2023 Stanford Autonomous Systems Lab
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


import copy
import rclpy
import sys
import os
username = os.getenv("USERNAME")
sys.path.append('/home/'+username+'/Transformer/lib/python3.10/site-packages')
import numpy as np
import cvxpy as cp
import typing as T
import time

from ff_control.tri_thruster_ctrl import TrinaryThrusterController
from ff_control.linear_ctrl import LinearController
import ff_control.transformer_controller.ros_manage as TTO_manager
from ff_control.transformer_controller.freeflyer import FreeflyerModel, ocp_no_obstacle_avoidance, ocp_obstacle_avoidance
import ff_control.transformer_controller.ff_scenario as ff_scenario
from ff_msgs.msg import FreeFlyerState
from ff_msgs.msg import FreeFlyerStateStamped
from ff_srvs.srv import ObsInfo
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Path
from std_msgs.msg import Float32
from rclpy.executors import MultiThreadedExecutor
from rclpy.node import MutuallyExclusiveCallbackGroup

class TransformerBasedSCPController(LinearController):
    """
    Class for a Transformer-cvxpi based optimization controller (based on linear_ctrl.py.

    state definition:   [x, y, theta, vx, vy, wz]
    control definition: [u0, u1, u2, u3] Trinary (-1, 0, 1) thruster representation of 8-thruster config

    Note: the current implementation is not thread safe
    """
    STATE_DIM = ff_scenario.N_STATE
    CONTROL_DIM = ff_scenario.N_ACTION
    OBSERVATION_DIM = ff_scenario.N_OBSERVATION
    SINGLE_OBS_DIM = ff_scenario.SINGLE_OBS_DIM
    N_OBS_MAX = ff_scenario.N_OBS_MAX
    TRANSFORMER_MODEL = ff_scenario.TRANSFORMER_MODEL #'#'checkpoint_ff_time40_100_chunk100R_ctgrtg'#'checkpoint_ff_ctgrtg'#
    TRANSFORMER_WS = 'dyn'
    EMBD_OBS_FLAG = True

    def __init__(self):
        super().__init__('thrust_opt_control_node')
        # State estimator
        '''self.declare_parameter("state_channel", "est/state")
        self._state_sub = self.create_subscription(
            FreeFlyerStateStamped,
            self.get_parameter("state_channel").get_parameter_value().string_value,
            self._state_callback,
            10,
        )'''
        self._state_ready = False
        self._state_stamped = FreeFlyerStateStamped()
        self._state_desired = FreeFlyerStateStamped()
        self._params_ready = False
        #self._deadband = np.array([0.05, 0.05, 0.05, 0.02, 0.02, 0.02])
        #self._readjust_controller_bounds = np.array([0.5, 0.5])

        # Obstale info service client
        self.obs_info_cli = self.create_client(ObsInfo, 'obstacles_info')
        while not self.obs_info_cli.wait_for_service(timeout_sec=1.):
            self.get_logger().info('obstales_info server not available yet, waiting...')
        self.get_obs_info_request()

        # Load Transformer model and FreeFlyer model
        self.TTO_model = TTO_manager.get_DT_model(self.TRANSFORMER_MODEL, self.STATE_DIM, self.CONTROL_DIM, self.OBSERVATION_DIM, self.SINGLE_OBS_DIM, self.EMBD_OBS_FLAG)
        self.TTO_model.eval()
        self.data_stats = TTO_manager.get_data_stats(self.TRANSFORMER_MODEL)
        self.get_logger().info('Transformer model '+self.TRANSFORMER_MODEL+' imported, LET\'S FLY!!!')
        self.get_logger().info('Device used for the transfomer: '+str(TTO_manager.device))
        self.generalized_time = ff_scenario.generalized_time
        self.generalized_obs = ff_scenario.generalized_obs

        # Goal State command
        self.state_callback_group = MutuallyExclusiveCallbackGroup()
        self.state_sp_sub = self.create_subscription(FreeFlyerStateStamped,
            'ctrl/state', self.state_setpoint_callback, 10, callback_group=self.state_callback_group)
        self.rviz_sp_sub = self.create_subscription(PoseStamped,
            '/goal_pose', self.rviz_setpoint_callback, 10, callback_group=self.state_callback_group)
        
        self.goal_repeater_pub = self.create_publisher(FreeFlyerStateStamped, "robot/goal", 10)
        self.opt_cost_pub = self.create_publisher(Float32, "cost", 10)
        self.path_pub = self.create_publisher(Path, '/robot/path_marker', 10)
        self.ws_pub = self.create_publisher(Path, '/robot/ws_marker', 10)

        # Control loop
        # feedback gain params
        self.control_callback_group = MutuallyExclusiveCallbackGroup()
        self.declare_parameter('gain_f', 2.0)
        self.declare_parameter('gain_df', 10.0)
        self.declare_parameter('gain_t', 0.2)
        self.declare_parameter('gain_dt', 0.4)
        self.declare_parameter('total_time', ff_scenario.T_nominal)
        self.n_timesteps = int(ff_scenario.T_nominal/ff_scenario.dt) + 1
        self._trajectory_ready = False
        self.control_period = 0.1
        self.timer = self.create_timer(self.control_period, self.control_loop, callback_group=self.control_callback_group)
        self.trajectory_timer = self.create_timer(2*self.control_period, self.trajectory_loop, callback_group=self.state_callback_group)
    
    '''def send_control(self, curr_state: T.Union[FreeFlyerState, np.ndarray], state_des: T.Union[FreeFlyerState, np.ndarray]) -> None:
        """
        Send desirable target state for optimization-based control.

        :param state_des: desired state
        """
        t = time.time()
        # self.get_logger().info("Goal"+str(state_des) + "\n")
        if not self._state_ready:
            self.get_logger().warn("send_control ignored, current state not yet ready")
            return

        if not self._params_ready:
            self.get_logger().warn("send_control ignored, parameters not yet ready")
            return

        self.goal_repeater_pub.publish(self._state_desired)

        # convert desired state to vector form
        if isinstance(state_des, FreeFlyerState):
            state_des = self.state2vec(state_des)

        if isinstance(curr_state, FreeFlyerState):
            curr_state = self.state2vec(curr_state)

        if np.all(np.abs(state_des - curr_state) < self._deadband):
            self._u = np.zeros(4)
        else:
            if not self._close_controller:
                pos_err = np.abs(state_des[:2] - curr_state[:2])
                # state_err_vec = np.abs(np.append(pos_err, th_err))
                if np.all(pos_err < self._readjust_controller_bounds):
                    self.set_close_hyperparameters()
            else:
                pos_err = np.abs(state_des[:2] - curr_state[:2])
                # state_err_vec = np.abs(np.append(pos_err, th_err))
                if np.any(pos_err > self._readjust_controller_bounds):
                    self.set_default_hyperparameters()


            self.lbw[:len(curr_state)] = curr_state
            self.ubw[:len(curr_state)] = curr_state
            self.w0[0] = curr_state
            
            sol = self.cont_nlp_solver(x0=vertcat(*self.w0), p=DM(list(state_des)), lbx=self.lbw, ubx=self.ubw, lbg=self.lbg, ubg=self.ubg)
            output = sol['x']
            
            cost = Float32()
            cost.data = float(sol['f'])
            self.opt_cost_pub.publish(cost)   

            u0_opt, u1_opt, u2_opt, u3_opt = self.unpack_wopt(output)
            cont_thrust = np.array([u0_opt[0], u1_opt[0], u2_opt[0], u3_opt[0]]).reshape((4,1)) / self.Fmax
            self._u = np.round(cont_thrust)

            # Warm Start next run
            self.w0 = self.get_next_warm_start(output)

        self.set_tri_thrusters(self._u)
        self.get_logger().info("Control Computation Time: " + str(time.time()-t))'''
    
    def get_obs_info_request(self):
        future = self.obs_info_cli.call_async(ObsInfo.Request())
        rclpy.spin_until_future_complete(self, future)
        obs_info = future.result()
        self.obstacles = {
            'position' : np.vstack((np.array(obs_info.cyl_pos_x), np.array(obs_info.cyl_pos_y))).T,
            'radius' : np.array(obs_info.cyl_rads)
        }
        if (self.obstacles['position'] == ff_scenario.obs_nominal['position']).all() and (self.obstacles['radius'] == ff_scenario.obs_nominal['radius']).all():
            self.get_logger().info(str(self.obstacles))
        else:
            raise ValueError('The obstacles specified for the ROS simulation and in ff_scenario.py don\'t match!!!')

    def get_state(self) -> T.Optional[FreeFlyerState]:
        """Get the current latest state."""
        if not self._state_ready:
            self.get_logger().error("get_state failed: state not yet ready")
            return None

        return self._state_stamped.state

    def state_ready_callback(self) -> None:
        # copy current position as goal position
        self._state_desired.header.stamp = self.get_clock().now().to_msg()
        self._state_desired.state = self.get_state()
        self.get_logger().info('Initial state desired: '+str(self._state_desired))

    def state_setpoint_callback(self, msg: FreeFlyerStateStamped) -> None:
        self._state_desired = copy.deepcopy(msg)

    def rviz_setpoint_callback(self, msg: PoseStamped) -> None:
        # Goal pose computation
        state_desired = FreeFlyerStateStamped()
        state_desired.header.stamp = msg.header.stamp
        state_desired.state.pose.x = msg.pose.position.x
        state_desired.state.pose.y = msg.pose.position.y
        z = msg.pose.orientation.z
        w = msg.pose.orientation.w
        state_desired.state.pose.theta = np.arctan2(2 * w * z, w * w - z * z)
        state_desired.state.twist.vx = 0.
        state_desired.state.twist.vy = 0.
        state_desired.state.twist.wz = 0.
        state_init = self.state2vec(self.get_state())
        state_init[3:] = 0
        state_final = self.state2vec(state_desired.state)

        # Create Freeflyer model
        param = {
            'mass' : self.m,
            'J' : self.Ixx,
            'radius' : self.radius,
            'F_t_M' : self.Fmax,
            'b_t' : self.r,
            'Lambda' : self.Lambda,
            'Lambda_inv' : self.Lambda_inv
        }
        ffm = FreeflyerModel(param=param)
        self.get_logger().info('Radius robot: '+str(ffm.param['radius']))
        
        # Solve Convex Problem
        final_time = self.get_parameter('total_time').get_parameter_value().double_value
        self.get_logger().info('State init '+str(state_init))
        self.get_logger().info('State final '+str(state_final))
        self.get_logger().info('Time final '+str(final_time))
        self.get_logger().info('Obstacles '+str(self.obstacles))
        traj_cvx, _, _, _ = ocp_no_obstacle_avoidance(ffm, state_init, state_final, final_time, self.obstacles)
        _, actions_ws_cvx = traj_cvx['states'], traj_cvx['actions_G']

        # Use Transformer to infer the warm-starting trajectory
        rtg = - np.sum(np.linalg.norm(actions_ws_cvx, ord=1, axis=0))
        if (not self.generalized_obs) and (not self.generalized_time):
            inference_func = getattr(TTO_manager, 'ros_model_inference_'+self.TRANSFORMER_WS)
            DT_trajectory, DT_runtime = inference_func(self.TTO_model, self.data_stats, state_init, state_final, rtg_perc=1., ctg_perc=0., rtg=rtg, ctg_clipped=True)
        elif (not self.generalized_obs) and (self.generalized_time):
            inference_func = getattr(TTO_manager, 'ros_model_inference_'+self.TRANSFORMER_WS+'_time')
            DT_trajectory, DT_runtime = inference_func(self.TTO_model, self.data_stats, state_init, state_final, rtg_perc=1., ctg_perc=0., rtg=rtg, ttg=final_time,
                                                       ctg_clipped=True, chunksize=ff_scenario.chunksize, end_on_ttg=True)
        elif (self.generalized_obs) and (not self.generalized_time):
            inference_func = getattr(TTO_manager, 'ros_model_inference_'+self.TRANSFORMER_WS+'_obs')
            DT_trajectory, DT_runtime = inference_func(self.TTO_model, self.data_stats, state_init, state_final, self.obstacles, self.N_OBS_MAX, rtg_perc=1., ctg_perc=0., rtg=rtg, ctg_clipped=True)
        else:
            raise ValueError('The formulation with generalized final time and obstacles has not been implemented yet!')
        
        # np.savez_compressed('/home/dcelestini/ff_ws/src/freeflyer2/ff_control/ff_control/transformer_controller/debug_ros_obs.npz', DT_trajectory=DT_trajectory)
        states_ws_DT = np.append(DT_trajectory['xypsi_' + self.TRANSFORMER_WS],
                                 (DT_trajectory['xypsi_' + self.TRANSFORMER_WS][:,-1] + ffm.B_imp @ DT_trajectory['dv_' + self.TRANSFORMER_WS][:, -1]).reshape((6,1)), 1)
        actions_ws_DT = DT_trajectory['dv_' + self.TRANSFORMER_WS]
        self.ws_pub.publish(self.traj2path(states_ws_DT, height=0.08))
        
        # Solve SCP
        scp_time0 = time.time()
        traj_scp_DT, _, iter_scp_DT, feas_scp_DT = ocp_obstacle_avoidance(ffm, states_ws_DT, actions_ws_DT, state_init, state_final, self.obstacles)
        scp_runtime = time.time() - scp_time0
        self.path_pub.publish(self.traj2path(traj_scp_DT['states'], height=0.1))

        self.trajectory_timer.cancel()
        self.trajectory_timer = self.create_timer(ff_scenario.dt, self.trajectory_loop)
        self.get_logger().info('============== SCP iterations: '+str(iter_scp_DT))
        self.get_logger().info('============== SCP status: '+str(feas_scp_DT))
        self.get_logger().info('============== TTO computational time: '+str(DT_runtime)+' s')
        self.get_logger().info('============== SCP computational time: '+str(scp_runtime)+' s')
        if feas_scp_DT == 'infeasible':
            self.get_logger().error("SCP failed in computing an optimal path! No action will be executed!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        else:
            self._desired_trajectory = {
                'states' : traj_scp_DT['states'],
                'timestep' : 0
            }
            self._trajectory_ready = True
    
    ############################## Main Loops for trajectory tracking ##############################
    def control_loop(self) -> None:
        # state not yet ready
        if not self.state_is_ready():
            self.get_logger().error("control_loop not started: state not yet ready")
            return

        # build feedback gain matrix
        gain_f = self.get_parameter('gain_f').get_parameter_value().double_value
        gain_df = self.get_parameter('gain_df').get_parameter_value().double_value
        gain_t = self.get_parameter('gain_t').get_parameter_value().double_value
        gain_dt = self.get_parameter('gain_dt').get_parameter_value().double_value
        K = np.array([[gain_f, 0, 0, gain_df, 0, 0],
                      [0, gain_f, 0, 0, gain_df, 0],
                      [0, 0, gain_t, 0, 0, gain_dt]])

        self.send_control(self._state_desired.state, K)

    def trajectory_loop(self) -> None:
        # If no trajectory has been computed yet, do nothing, else change periodically the _state_desired
        if (self._trajectory_ready) and (self._desired_trajectory['timestep'] < self.n_timesteps):
            self.get_logger().error('Current timesteps: ' + str(self._desired_trajectory['timestep']))
            current_state_desired = FreeFlyerStateStamped()
            current_state_desired.header.stamp = self.get_clock().now().to_msg()
            current_state_desired.state = self.vec2state(copy.deepcopy(self._desired_trajectory['states'][:,self._desired_trajectory['timestep']]))
            self._state_desired = copy.deepcopy(current_state_desired)
            self.goal_repeater_pub.publish(self._state_desired)
            self._desired_trajectory['timestep'] += 1

    ############################### Helper Functions to pack/unpack messages ###############################
    @staticmethod
    def state2vec(state: FreeFlyerState) -> np.ndarray:
        """
        Convert state message to state vector.

        :param state: state message
        :return: state vector
        """
        return np.array(
            [
                state.pose.x,
                state.pose.y,
                state.pose.theta,
                state.twist.vx,
                state.twist.vy,
                state.twist.wz,
            ]
        )

    @staticmethod
    def vec2state(vec: np.ndarray) -> FreeFlyerState:
        """
        Convert state vector to state message.

        :param vec: state vector
        :return: state message
        """
        state = FreeFlyerState()
        state.pose.x = vec[0]
        state.pose.y = vec[1]
        state.pose.theta = vec[2]
        state.twist.vx = vec[3]
        state.twist.vy = vec[4]
        state.twist.wz = vec[5]

        return state
    
    def traj2path(self, traj:np.ndarray, height) -> Path:
        '''
        traj is a 6x101 np.ndarray
        '''
        now = self.get_clock().now().to_msg()
        path_msg = Path()
        path_msg.header.stamp = now
        path_msg.header.frame_id = 'world'
        for i in range(traj.shape[1]):
            pose_msg = PoseStamped()
            pose_msg.header.stamp = now
            pose_msg.header.frame_id = 'world'
            pose_msg.pose.position.x = traj[0,i]
            pose_msg.pose.position.y = traj[1,i]
            pose_msg.pose.position.z = height
            pose_msg.pose.orientation.x = 0.0
            pose_msg.pose.orientation.y = 0.0
            pose_msg.pose.orientation.z = np.sin(traj[2,i]/2)
            pose_msg.pose.orientation.w = np.cos(traj[2,i]/2)
            path_msg.poses.append(pose_msg)

        return path_msg
    
    ############################### Helper Functions to access ROS parameters ###############################
    @property
    def r(self):
        return self.p.actuators["thrusters_lever_arm"]

    @property
    def Lambda(self):
        return np.array([[     0,       1,       0,      1],
                         [     1,       0,       1,      0],
                         [self.r, -self.r, -self.r, self.r]])

    @property
    def Lambda_inv(self):
        return np.array([[  0, 0.5,  1/(4*self.r)],
                         [0.5,   0, -1/(4*self.r)],
                         [  0, 0.5, -1/(4*self.r)],
                         [0.5,   0,  1/(4*self.r)]])

    @property
    def radius(self):
        return self.p.dynamics["radius"]
    
    @property
    def Fmax(self):
        return self.p.actuators["F_max_per_thruster"]

    @property
    def m(self):
        return self.p.dynamics["mass"]
    
    @property
    def Ixx(self):
        return self.p.dynamics["inertia"]
    
    def state_is_ready(self) -> bool:
        """
        Check if state is ready.

        :return: True if state is ready, False otherwise
        """
        return self._state_ready

    def _state_callback(self, msg: FreeFlyerStateStamped) -> None:
        """
        Get called when the first current state measurement comes in.
        """
        self._state_stamped = copy.deepcopy(msg)

        if not self._state_ready:
            self._state_ready = True
            self.state_ready_callback()



def main(args=None):
    rclpy.init(args=args)
    opt_ctrl = TransformerBasedSCPController()
    MTexec = MultiThreadedExecutor()
    rclpy.spin(opt_ctrl, executor=MTexec)
    rclpy.shutdown()


if __name__ == '__main__':
    main()